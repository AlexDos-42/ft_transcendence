openapi: 3.1.0
info:
  title: API Transcendence
  version: '1.0'
  description: 'https://oai.github.io/Documentation/best-practices.html https://stoplight.io/studio/ https://openapi.tools/#text-editors http://apistylebook.com/design/guidelines/ http://apistylebook.com/design/guidelines/zalando-restful-api-guidelines#api-design https://adidas.gitbook.io/api-guidelines https://stoplight.io/video/ama-spectral-and-style-guides/'
servers:
  - url: 'http://localhost:3000'
paths:
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    userName: bob
                    email: bob.fellow@gmail.com
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - userName
                - email
                - password
            examples:
              Create User Bob Fellow:
                value:
                  userName: Bob98
                  email: bob.fellow@gmail.com
                  password: DE2w_j$8309
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  /users:
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-users
      security:
        - BearerAuth: []
      description: Return a list of user
      parameters:
        - schema:
            type: string
          in: header
          name: name
          description: Find users who approximately match the given name
        - schema:
            type: boolean
          in: query
          name: online
          description: To filter only user
  '/users/{id}':
    parameters:
      - name: id
        in: path
        schema:
          type: integer
          format: int64
        description: An object id
        required: true
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    userName: Alice
                    email: alice.smith@gmail.com
                    online: true
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      parameters:
        - $ref: '#/components/parameters/take'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/order_by'
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    userName: Rebecca
                    email: rebecca@gmail.com
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  '/users/{id}/games':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Return the game history of a user
      tags: []
      responses:
        '200':
          description: Games
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    userName: Alice
                    email: alice.smith@gmail.com
                    online: true
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the game history of a specific user
      parameters:
        - $ref: '#/components/parameters/take'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/order_by'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      description: Update the information of an existing user.
  '/users/{id}/avatar':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get the avatar of a specific player
      tags: []
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
      operationId: get-users-userId-avatar
      security:
        - BearerAuth: []
      parameters: []
    post:
      summary: ''
      operationId: post-users-userId-avatar
      responses:
        '200':
          description: OK
      description: Update the user avatar
      requestBody:
        content:
          image/png:
            schema:
              type: object
              properties: {}
      parameters: []
  '/users/{id}/achievements':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-users-userId-achievements
      description: Return the list of achievements a specific user won
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
  /achievements:
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-achievements
      description: Return the list of all existing achievements
      parameters:
        - $ref: '#/components/parameters/take'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/order_by'
    parameters: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - id: 142
          userName: alice
          email: alice.smith@gmail.com
          online: true
          avatar: 'http://localhost:3000'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          readOnly: true
        userName:
          type: string
          example: Bread Pitt
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        online:
          type: boolean
        avatar:
          type: string
          format: uri-reference
      required:
        - userName
        - email
    Achievement:
      title: Achievement
      type: object
      description: Achievement object
      examples:
        - id: 42
          name: Tyson Fury
          description: Win 30 games in a row.
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
      required:
        - id
        - name
        - description
  parameters:
    take:
      name: take
      in: query
      required: false
      schema:
        type: string
        example: '25'
      description: Define the number of items returned
    order_by:
      name: order_by
      in: query
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: asc
      description: Choose the order either asc or desc
    skip:
      name: skip
      in: query
      required: false
      schema:
        type: string
      description: Skip n elements before taking elements
    userId:
      name: id
      in: path
      schema:
        type: integer
        format: int64
      description: An object id
      required: true
  examples: {}
