openapi: 3.0.1
info:
  title: API Transcendence
  version: '1.0'
  description: |
    - https://oai.github.io/Documentation/best-practices.html
    - https://stoplight.io/studio/ https://openapi.tools/#text-editors
    - http://apistylebook.com/design/guidelines/
    - http://apistylebook.com/design/guidelines/zalando-restful-api-guidelines#api-design https://adidas.gitbook.io/api-guidelines
    - https://stoplight.io/video/ama-spectral-and-style-guides/
    - https://stoplight.io/api-design-guide/
    - https://openapi.tools/
    - https://meta.stoplight.io/docs/prism/ZG9jOjk3-validation-proxy
  contact:
    email: 42@42.com
    name: '42'
servers:
  - url: 'http://localhost:3000'
    description: local backend
  - url: 'http://localhost:3001'
    description: local backend proxy
paths:
  /auth/signup:
    post:
      summary: Create an account
      operationId: post-signup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  acces_token:
                    type: string
                required:
                  - id
                  - acces_token
        '400':
          $ref: '#/components/responses/400'
      description: Create an account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - username
                - email
                - password
        description: ''
      tags:
        - auth
      security: []
  /auth/signin:
    post:
      summary: Login
      operationId: post-signin
      responses:
        '201':
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    minimum: 0
                  access_token:
                    type: string
                required:
                  - id
                  - access_token
        '400':
          $ref: '#/components/responses/400'
      description: 'Just Login '
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
        description: ''
      tags:
        - auth
      security: []
    parameters: []
  /users:
    get:
      summary: List of users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  meta:
                    $ref: '#/components/schemas/Meta'
                  links:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - users
                  - meta
                  - links
        '401':
          $ref: '#/components/responses/401'
      operationId: get-users
      description: |-
        Return a list of users, two queries parameter can be added to filter by user name and if they are online
        Online useless ?
      parameters:
        - schema:
            type: string
          in: query
          name: username
          description: Find users who approximately match the given name
        - schema:
            type: boolean
          in: query
          name: online
          description: To filter online users
          deprecated: true
      tags:
        - users
  '/users/{id}':
    parameters:
      - name: id
        in: path
        schema:
          type: integer
          format: int64
        description: An object id
        required: true
    get:
      summary: Get a specific user
      tags:
        - users
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    username: Alice
                    email: alice.smith@gmail.com
                    online: true
                    avatar: 'http://localhost:3000/users/142/avatar'
                    role: admin
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: User Not Found
      operationId: get-users-id
      description: Retrieve the user information given a specific id.
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order_by'
    patch:
      summary: Update infos of a specific user
      operationId: patch-users-id
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      description: |-
        Update some of the information, email, password... only email and password right ?
        To update user's avatar, use PUT /users/{id}/avatar endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                email:
                  type: string
      tags:
        - users
    delete:
      summary: Delete user
      operationId: delete-users-id
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
      description: |
        Delete myself, autodestruction initiated.
        Website owner or website admins can delete any users. Right ?
      tags:
        - users
  '/users/{id}/avatar':
    parameters:
      - schema:
          type: integer
          minimum: 0
        name: id
        in: path
        required: true
        description: The user id
    get:
      summary: Get avatar photo of a user
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
      operationId: get-users-id-avatar
      parameters: []
      description: Return the user avatar
      tags:
        - users
    put:
      summary: Update avatar of currently logged user.
      operationId: put-users-id-avatar
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: file must be jpg/jpeg or png
      description: |-
        Update avatar of currently logged user.
        (website admins can't update or delete others users avatars right ?)
      tags:
        - users
    delete:
      summary: Remove the current avatar
      operationId: delete-users-id-avatar
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      description: Remove current avatar of logged user.
      tags:
        - users
  '/users/{user_id}/channels':
    get:
      summary: Get channels I'm in
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  channels:
                    type: array
                    items:
                      $ref: '#/components/schemas/Channel'
                  meta:
                    $ref: '#/components/schemas/Meta'
                  links:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - channels
                  - meta
                  - links
        '401':
          $ref: '#/components/responses/401'
      operationId: put-users-id-channels
      description: |-
        Get the list of channels im in.
        Not really needed because we will need a socket.io even to update channels.
      deprecated: true
      tags:
        - channels
    post:
      summary: Create a new channel or dm a specific user
      operationId: post-users-user_id-channels-channel_id
      responses:
        '200':
          description: |-
            OK, response not really needed, channels updates will be send via websockets anyway.
            And the owner will be added in the socket room representing the channel.
        '401':
          description: Unauthorized
        '409':
          description: Specific to dm. 409 conflict is returned if a dm channel between both users already exists.
      description: Create a channel or
      parameters:
        - schema:
            type: string
          in: query
          description: Used to dm a specific user
          name: dm_user_id
      tags:
        - channels
    parameters:
      - schema:
          type: integer
          minimum: 0
        name: user_id
        in: path
        required: true
        description: The user id
  '/users/{user_id}/channels/{channel_id}':
    parameters:
      - schema:
          type: integer
          minimum: 0
        name: user_id
        in: path
        required: true
        description: 'The user '
      - schema:
          type: integer
          minimum: 0
        name: channel_id
        in: path
        required: true
    delete:
      summary: Leave a given channel
      operationId: delete-users-user_id-channels-channel_id
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
      description: 'Leave a given channel, if the user who leave is the admin, then the oldest to have joined become admin ? If there is not already an other admin ?'
      tags:
        - channels
    put:
      summary: Join a given channel
      operationId: put-users-user_id-channels-channel_id
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
      description: |-
        Subscribe to a channel if public. if private, the password must be provided

        OR maybe delete this route and to all the things in websockets ? what's easier ?
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
      tags:
        - channels
    patch:
      summary: Modify channel
      operationId: patch-users-user_id-channels-channel_id
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
      description: |-
        Only the owner can add/update/delete password.
        owner can add admin role to a user.
        administrator can ban or mute users for a certain amount of time

        OR maybe delete this route and to all the things in websockets ? what's easier ?
      tags:
        - channels
  '/users/{id}/friends':
    get:
      summary: Get friend's list of logged user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  friends:
                    type: array
                    items:
                      $ref: '#/components/schemas/Friends'
                  meta:
                    $ref: '#/components/schemas/Meta'
                  links:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - friends
                  - meta
                  - links
              examples:
                example-1:
                  value:
                    friends:
                      - id: 0
                        username: Bread Pitt
                        email: bread.pitt@student.42.fr
                        avatar: 'http://localhost:3001/users/42/avatar'
                        role: admin
                        online: true
                        inGame: true
                    meta:
                      totalItems: 0
                      itemCount: 0
                      totalPages: 11
                      currentPage: 3
                    links:
                      first: 'http://localhost:3000/users?page=3&limit=15'
                      previous: 'http://localhost:3000/users?page=2&limit=15'
                      next: 'http://localhost:3000/users?page=4&limit=15'
                      last: 'http://localhost:3000/users?page=11&limit=15'
        '401':
          $ref: '#/components/responses/401'
      operationId: get-users-id-friends
      description: 'Not really needed, friends updates and will need to pass through sockets.'
      deprecated: true
      tags:
        - friends
    delete:
      summary: Delete a friend or a pending invite
      operationId: delete-users-id-friends
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
      description: 'Delete a friend or pending invite (from both sides, applicant can delete his invite, and recipient can refuse an invite.'
      parameters:
        - schema:
            type: integer
            minimum: 0
          in: query
          name: other_user_id
          required: true
      tags:
        - friends
    put:
      summary: ''
      operationId: put-users-id-friends
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401'
      description: Send an invite
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
      tags:
        - friends
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
  '/users/{id}/history':
    parameters:
      - schema:
          type: integer
          minimum: 0
        name: id
        in: path
        required: true
        description: The user id
    get:
      summary: Get match history of a user
      tags:
        - not needed
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  history:
                    type: array
                    items:
                      $ref: '#/components/schemas/Game'
                  meta:
                    $ref: '#/components/schemas/Meta'
                  links:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - history
                  - meta
                  - links
        '401':
          $ref: '#/components/responses/401'
      operationId: get-users-id-history
      description: |-
        Return a list of past games from a user.
        Not needed by correction scale ?
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      deprecated: true
  '/users/{id}/achievements':
    parameters:
      - schema:
          type: integer
          minimum: 0
        name: id
        in: path
        required: true
        description: The user id
    get:
      summary: Get user's achivements
      tags:
        - not needed
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  achievements:
                    type: array
                    items:
                      $ref: '#/components/schemas/Achievement'
                  meta:
                    $ref: '#/components/schemas/Meta'
                  links:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - achievements
                  - meta
                  - links
              examples: {}
        '401':
          $ref: '#/components/responses/401'
      operationId: get-users-id-achievements
      description: |-
        Return the list of achievements a specific user won.
        Not needed by scale ! (we will see at the end...)
      deprecated: true
  /achievements:
    get:
      summary: Get all existing achievements
      tags:
        - not needed
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  achievements:
                    type: array
                    items:
                      $ref: '#/components/schemas/Achievement'
                  meta:
                    $ref: '#/components/schemas/Meta'
                  links:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - achievements
                  - meta
                  - links
              examples:
                example-1:
                  value:
                    achievements:
                      - id: 0
                        name: string
                        description: string
                    meta:
                      totalItems: 0
                      itemCount: 0
                      totalPages: 0
                      currentPage: 0
                    links:
                      first: 'http://localhost:3000/users?page=3&limit=15'
                      previous: 'http://localhost:3000/users?page=2&limit=15'
                      next: 'http://localhost:3000/users?page=4&limit=15'
                      last: 'http://localhost:3000/users?page=11&limit=15'
        '401':
          $ref: '#/components/responses/401'
      operationId: get-achievements
      description: |-
        Return the list of all existing achievements.
        Not needed by scale ! (we will see at the end...)
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order_by'
      deprecated: true
    parameters: []
components:
  securitySchemes:
    BearerAuthJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-tags:
        - user
      x-examples:
        example-1:
          id: 1
          username: Bread Pitt
          email: bread.pitt@student.42.fr
          avatar: 'http://localhost:3001/users/42/avatar'
          role: admin
        example-2:
          id: 2
          username: Pickle rick
          email: rick@student.42.fr
          avatar: 'http://localhost:3001/users/43/avatar'
          role: user
        example-4:
          id: 3
          username: Alan
          email: Alan@student.42.fr
          avatar: 'http://localhost:3001/users/42/avatar'
          role: admin
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          minimum: 0
          format: int64
          readOnly: true
        username:
          type: string
          example: Bread Pitt
          x-faker: internet.userName
          readOnly: true
        email:
          type: string
          format: email
          example: bread.pitt@student.42.fr
          x-faker: internet.exampleEmail
        avatar:
          type: string
          format: uri-reference
          x-faker: image.avatar
          example: 'http://localhost:3001/users/42/avatar'
          readOnly: true
        role:
          type: string
          enum:
            - admin
            - user
            - owner
          readOnly: true
      required:
        - id
        - username
        - email
        - avatar
        - role
    Achievement:
      title: Achievement
      type: object
      description: Achievement object
      x-examples:
        example-1:
          id: 42
          name: Tyson Fury
          description: Win 30 games in a row.
        example-2:
          id: 43
          name: Pilier de bar
          description: Play 15 games each day for one month
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        name:
          type: string
          x-faker: company.catchPhrase
        description:
          type: string
          x-faker: lorem.sentenses
      required:
        - id
        - name
        - description
    Game:
      title: Game
      type: object
      properties:
        id:
          type: integer
          minimum: 0
        date:
          type: string
          format: date-time
        winner:
          $ref: '#/components/schemas/User'
        looser:
          $ref: '#/components/schemas/User'
      required:
        - id
        - date
        - winner
        - looser
      description: ''
    Channel:
      title: Channel
      type: object
      description: ''
      properties:
        id:
          type: integer
          minimum: 0
        visibility:
          type: string
          enum:
            - public
            - private
        ownerId:
          type: integer
        what_else:
          type: string
      required:
        - id
        - visibility
        - ownerId
        - what_else
    Error:
      title: Error
      type: object
      description: Standard error object
      x-examples:
        example-1:
          status: 418
          message: I'm a teapot
      properties:
        statusCode:
          type: integer
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
        message:
          type: string
        error:
          type: string
      required:
        - statusCode
        - message
        - error
    Pagination:
      title: Pagination
      type: object
      properties:
        first:
          type: string
          format: uri
          example: 'http://localhost:3000/users?page=3&limit=15'
          readOnly: true
        previous:
          type: string
          format: uri
          example: 'http://localhost:3000/users?page=2&limit=15'
          readOnly: true
        next:
          type: string
          format: uri
          example: 'http://localhost:3000/users?page=4&limit=15'
          readOnly: true
        last:
          type: string
          format: uri
          example: 'http://localhost:3000/users?page=11&limit=15'
          readOnly: true
      required:
        - first
        - previous
        - next
        - last
    Meta:
      title: Meta
      type: object
      x-examples: {}
      properties:
        totalItems:
          type: integer
          format: int32
          minimum: 0
        itemCount:
          type: integer
          minimum: 0
          format: int32
        totalPages:
          type: integer
          format: int32
          minimum: 0
          example: 11
        currentPage:
          type: integer
          minimum: 0
          format: int32
          example: 3
      required:
        - totalItems
        - itemCount
        - totalPages
        - currentPage
    Friends:
      title: Friends
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            online:
              type: boolean
            inGame:
              type: boolean
            status:
              type: string
              enum:
                - accepted
                - pending
                - rejected
          required:
            - online
            - inGame
    Stats:
      title: Stats
      type: object
      properties:
        level:
          example: 42
          format: int32
          type: integer
        victories:
          type: integer
          minimum: 0
          example: 51
        losses:
          type: integer
          minimum: 0
          example: 49
      required:
        - level
  parameters:
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        example: 25
        minimum: 0
        format: int32
        default: 10
      description: Define the maximum items returned per page
    order_by:
      name: order_by
      in: query
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: asc
      description: Choose the order either asc or desc
    page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 0
        format: int32
      description: The page we want
    sort:
      name: sort
      in: query
      required: false
      schema:
        type: string
      description: sort by a given field
  examples: {}
  requestBodies: {}
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '401':
      description: 'The request requires user authentication or, if the request included authorization credentials, authorization has been refused for those credentials.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples: {}
security:
  - BearerAuthJWT: []
tags:
  - name: auth
  - name: channels
  - name: friends
  - name: not needed
  - name: users
