openapi: 3.0.1
info:
  title: API Transcendence
  version: '1.0'
  description: |
    - https://oai.github.io/Documentation/best-practices.html
    - https://stoplight.io/studio/ https://openapi.tools/#text-editors
    - http://apistylebook.com/design/guidelines/
    - http://apistylebook.com/design/guidelines/zalando-restful-api-guidelines#api-design https://adidas.gitbook.io/api-guidelines
    - https://stoplight.io/video/ama-spectral-and-style-guides/
    - https://stoplight.io/api-design-guide/
    - https://openapi.tools/
    - https://meta.stoplight.io/docs/prism/ZG9jOjk3-validation-proxy
  contact:
    email: fake@email.com
    name: Faked
servers:
  - url: 'http://localhost:3000'
    description: Local dev base url
paths:
  /me:
    get:
      summary: Your GET endpoint
      operationId: get-me
      description: Return my info
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401'
    delete:
      summary: ''
      operationId: delete-me
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
      description: 'Delete me, autodestruction initiated'
      tags: []
    patch:
      summary: ''
      operationId: patch-me
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401'
      description: 'Update some of the information, email, password... only email and password right ?'
      tags: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  /me/friends:
    get:
      summary: Your GET endpoint
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  friends:
                    type: array
                    items:
                      $ref: '#/components/schemas/Friend'
        '401':
          $ref: '#/components/responses/401'
      operationId: get-me-friends
      description: 'Get a list of accepted friends ? maybe '
      tags: []
    post:
      summary: ''
      operationId: post-me-friends
      responses:
        '200':
          description: OK
      description: Send an invitation to someone
      tags: []
    delete:
      summary: ''
      operationId: delete-me-friends
      responses:
        '200':
          description: OK
      description: Delete a friend
      tags: []
  /me/channels:
    get:
      summary: Your GET endpoint
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  channels:
                    type: array
                    items:
                      $ref: '#/components/schemas/Channel'
        '401':
          $ref: '#/components/responses/401'
      operationId: get-me-channels
      tags: []
      description: Get the list of channels im in.
  /me/history:
    get:
      summary: List of past games
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  history:
                    type: array
                    items:
                      $ref: '#/components/schemas/Game'
        '401':
          $ref: '#/components/responses/401'
      operationId: get-me-history
      description: Return a list
  /users:
    get:
      summary: List of users
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401'
      operationId: get-users
      description: 'Return a list of users, two queries parameter can be added to filter by user name and if they are online'
      parameters:
        - schema:
            type: string
          in: header
          name: name
          description: Find users who approximately match the given name
        - schema:
            type: boolean
            default: false
          in: query
          name: online
          description: To filter online users
  '/users/{id}':
    parameters:
      - name: id
        in: path
        schema:
          type: integer
          format: int64
        description: An object id
        required: true
    get:
      summary: Get User
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    name: Alice
                    email: alice.smith@gmail.com
                    online: true
                    avatar: 'http://localhost:3000/users/142/avatar'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the user information.
      parameters:
        - $ref: '#/components/parameters/take'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/order_by'
  '/users/{id}/games':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Return the game history of a user
      responses:
        '200':
          description: Games
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    name: Alice
                    email: alice.smith@gmail.com
                    online: true
                    avatar: 'http://localhost:3000/users/142/avatar'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: User Not Found
      operationId: get-users-id-games
      description: Retrieve the game history of a specific user
      parameters:
        - $ref: '#/components/parameters/take'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/order_by'
      tags: []
  '/users/{id}/avatar':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get the avatar of a specific player
      tags: []
      responses:
        '200':
          description: OK
          content:
            image/*:
              schema:
                type: string
                format: binary
                x-faker: image.image
        '401':
          $ref: '#/components/responses/401'
      operationId: get-users-userId-avatar
      parameters: []
      description: Return the user avatar
    put:
      summary: ''
      tags: []
      operationId: put-users-id-avatar
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/401'
      description: Update the avatar. multipart ?
      parameters: []
  '/users/{id}/achievements':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  achievements:
                    type: array
                    items:
                      $ref: '#/components/schemas/Achievement'
                required:
                  - achievements
              examples:
                example-1:
                  value:
                    achievements:
                      - id: 42
                        name: Tyson Fury
                        description: Win 30 games in a row.
                      - id: 43
                        name: Pilier de bar
                        description: Play 15 games each day for one month
        '401':
          $ref: '#/components/responses/401'
      operationId: get-users-userId-achievements
      description: Return the list of achievements a specific user won
  /achievements:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  achievements:
                    type: array
                    items:
                      $ref: '#/components/schemas/Achievement'
                required:
                  - achievements
        '401':
          $ref: '#/components/responses/401'
      operationId: get-achievements
      description: Return the list of all existing achievements
      parameters:
        - $ref: '#/components/parameters/take'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/order_by'
    parameters: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-tags:
        - user
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          minimum: 0
          format: int64
          readOnly: true
        name:
          type: string
          example: Bread Pitt
          readOnly: true
          x-faker: internet.userName
        email:
          type: string
          format: email
          example: bread.pitt@student.42.fr
          x-faker: internet.exampleEmail
        online:
          type: boolean
          readOnly: true
        avatar:
          type: string
          format: uri-reference
          x-faker: image.avatar
          example: 'http://localhost:3001/users/42/avatar'
          readOnly: true
      required:
        - id
        - name
        - email
        - online
        - avatar
    Friend:
      $ref: '#/components/schemas/User'
    Achievement:
      title: Achievement
      type: object
      description: Achievement object
      x-examples:
        example-1:
          id: 42
          name: Tyson Fury
          description: Win 30 games in a row.
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        name:
          type: string
          x-faker: company.catchPhrase
        description:
          type: string
          x-faker: lorem.sentenses
      required:
        - id
        - name
        - description
    Game:
      title: Game
      type: object
      properties:
        id:
          type: integer
          minimum: 0
        date:
          type: string
          format: date-time
        winner:
          $ref: '#/components/schemas/User'
        looser:
          $ref: '#/components/schemas/User'
      required:
        - id
        - date
        - winner
        - looser
    Channel:
      title: Channel
      type: object
      description: ''
      properties:
        id:
          type: integer
          minimum: 0
        visibility:
          type: string
          enum:
            - public
            - private
        what_else:
          type: string
      required:
        - id
        - visibility
        - what_else
    Error:
      title: Error
      type: object
      description: Standard error object
      x-examples:
        example-1:
          status: 418
          message: I'm a teapot
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
        message:
          type: string
      required:
        - status
        - message
  parameters:
    take:
      name: take
      in: query
      required: false
      schema:
        type: string
        example: '25'
      description: Define the number of items returned
    order_by:
      name: order_by
      in: query
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: asc
      description: Choose the order either asc or desc
    skip:
      name: skip
      in: query
      required: false
      schema:
        type: string
      description: Skip n elements before taking elements
  examples: {}
  requestBodies: {}
  responses:
    '401':
      description: 'The request requires user authentication or, if the request included authorization credentials, authorization has been refused for those credentials.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
